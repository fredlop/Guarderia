// <auto-generated />
using System;
using MatriculaOnline.App.Persistencia.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MatriculaOnline.App.Persistencia.Migrations
{
    [DbContext(typeof(MatriculasDbContext))]
    [Migration("20220910112146_nuevastablas")]
    partial class nuevastablas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Estudiante", b =>
                {
                    b.Property<int>("IdEstudiante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdGenero")
                        .HasColumnType("int");

                    b.Property<int?>("IdMatricula")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoIdeIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroDeIdentificacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstudiante");

                    b.HasIndex("IdGenero");

                    b.HasIndex("IdTipoIdeIdentificacion");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Genero", b =>
                {
                    b.Property<int>("IdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NombreGenero")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGenero");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            IdGenero = 1,
                            NombreGenero = "Masculino"
                        },
                        new
                        {
                            IdGenero = 2,
                            NombreGenero = "Femenino"
                        });
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Grado", b =>
                {
                    b.Property<int>("IdGrado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NombreGrado")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGrado");

                    b.ToTable("Grados");

                    b.HasData(
                        new
                        {
                            IdGrado = 1,
                            NombreGrado = "Primero de primaria"
                        },
                        new
                        {
                            IdGrado = 2,
                            NombreGrado = "Segundo de de primaria"
                        },
                        new
                        {
                            IdGrado = 3,
                            NombreGrado = "Tercero de de primaria"
                        },
                        new
                        {
                            IdGrado = 4,
                            NombreGrado = "Cuarto de de primaria"
                        },
                        new
                        {
                            IdGrado = 5,
                            NombreGrado = "Quinto de de primaria"
                        });
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Materia", b =>
                {
                    b.Property<int>("IdMateria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdGrado")
                        .HasColumnType("int");

                    b.Property<int>("IdProfesor")
                        .HasColumnType("int");

                    b.Property<string>("NombreMateria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMateria");

                    b.HasIndex("IdGrado");

                    b.HasIndex("IdProfesor");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Profesor", b =>
                {
                    b.Property<int>("IdProfesor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdGenero")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoIdeIdentificacion")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroDeIdentificacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProfesor");

                    b.HasIndex("IdGenero");

                    b.HasIndex("IdTipoIdeIdentificacion");

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.TiposIdentificacion", b =>
                {
                    b.Property<int>("IdIdentificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NombreIdentificacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdIdentificacion");

                    b.ToTable("TiposDeIdentificacion");

                    b.HasData(
                        new
                        {
                            IdIdentificacion = 1,
                            NombreIdentificacion = "Tarjeta de Identidad"
                        },
                        new
                        {
                            IdIdentificacion = 2,
                            NombreIdentificacion = "Cedula"
                        },
                        new
                        {
                            IdIdentificacion = 3,
                            NombreIdentificacion = "Pasaporte"
                        },
                        new
                        {
                            IdIdentificacion = 4,
                            NombreIdentificacion = "Cedula de extranjeria"
                        });
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Year", b =>
                {
                    b.Property<int>("IdYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NombreYear")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdYear");

                    b.ToTable("Years");

                    b.HasData(
                        new
                        {
                            IdYear = 1,
                            NombreYear = "2022"
                        },
                        new
                        {
                            IdYear = 2,
                            NombreYear = "2023"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Estudiante", b =>
                {
                    b.HasOne("MatriculaOnline.App.Dominio.Entidades.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("IdGenero");

                    b.HasOne("MatriculaOnline.App.Dominio.Entidades.TiposIdentificacion", "TiposIdentificacion")
                        .WithMany()
                        .HasForeignKey("IdTipoIdeIdentificacion");

                    b.Navigation("Genero");

                    b.Navigation("TiposIdentificacion");
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Materia", b =>
                {
                    b.HasOne("MatriculaOnline.App.Dominio.Entidades.Grado", "Grado")
                        .WithMany()
                        .HasForeignKey("IdGrado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatriculaOnline.App.Dominio.Entidades.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("IdProfesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grado");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("MatriculaOnline.App.Dominio.Entidades.Profesor", b =>
                {
                    b.HasOne("MatriculaOnline.App.Dominio.Entidades.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("IdGenero");

                    b.HasOne("MatriculaOnline.App.Dominio.Entidades.TiposIdentificacion", "TiposIdentificacion")
                        .WithMany()
                        .HasForeignKey("IdTipoIdeIdentificacion");

                    b.Navigation("Genero");

                    b.Navigation("TiposIdentificacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
